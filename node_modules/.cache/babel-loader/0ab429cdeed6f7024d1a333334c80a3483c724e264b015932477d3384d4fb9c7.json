{"ast":null,"code":"var _jsxFileName = \"/Users/thiagorosettimiranda/Documents/Developer/condo_facil/src/components/input/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { InputContainer, IconContainer, InputText, ErrorText, ViewPassword } from './styles';\nimport { Controller } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Input = ({\n  leftIcon,\n  name,\n  control,\n  errorMessage,\n  viewPasswordIcon,\n  isRequired = false,\n  type = 'text',\n  ...rest\n}) => {\n  _s();\n  // Estado para controlar o tipo do input (password ou text)\n  const [inputType, setInputType] = useState('password');\n\n  // Função para alternar o tipo de input\n  const togglePasswordVisibility = () => {\n    console.log('foi');\n    setInputType(prevType => prevType === 'password' ? 'text' : 'password');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(InputContainer, {\n      children: [leftIcon ? /*#__PURE__*/_jsxDEV(IconContainer, {\n        children: leftIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 22\n      }, this) : null, viewPasswordIcon ? /*#__PURE__*/_jsxDEV(ViewPassword, {\n        onClick: togglePasswordVisibility,\n        children: viewPasswordIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 30\n      }, this) : null, /*#__PURE__*/_jsxDEV(Controller, {\n        name: name,\n        control: control,\n        rules: {\n          required: true\n        },\n        render: ({\n          field\n        }) => /*#__PURE__*/_jsxDEV(InputText, {\n          ...field,\n          type: inputType,\n          ...rest\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 37\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), errorMessage ? /*#__PURE__*/_jsxDEV(ErrorText, {\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 23\n    }, this) : null]\n  }, void 0, true);\n};\n_s(Input, \"aV1HlXve5AIuoXUrkNK6g2SPozA=\");\n_c = Input;\nexport { Input };\nvar _c;\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["React","useState","InputContainer","IconContainer","InputText","ErrorText","ViewPassword","Controller","jsxDEV","_jsxDEV","Fragment","_Fragment","Input","leftIcon","name","control","errorMessage","viewPasswordIcon","isRequired","type","rest","_s","inputType","setInputType","togglePasswordVisibility","console","log","prevType","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","rules","required","render","field","_c","$RefreshReg$"],"sources":["/Users/thiagorosettimiranda/Documents/Developer/condo_facil/src/components/input/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { InputContainer, IconContainer, InputText, ErrorText, ViewPassword} from './styles';\nimport {IInput} from './type';\nimport { Controller } from \"react-hook-form\" \n\nconst Input = ({leftIcon, name, control, errorMessage, viewPasswordIcon, isRequired = false, type = 'text',...rest}: IInput) => {\n\n  // Estado para controlar o tipo do input (password ou text)\n  const [inputType, setInputType] = useState('password');\n\n  // Função para alternar o tipo de input\n  const togglePasswordVisibility = () => {\n    console.log('foi')\n    setInputType(prevType => prevType === 'password' ? 'text' : 'password');\n  };\n\n  return (\n    <>\n      <InputContainer>\n        {leftIcon ? (<IconContainer>{leftIcon}</IconContainer>): null }\n        {viewPasswordIcon ? (<ViewPassword onClick={togglePasswordVisibility} >{viewPasswordIcon}</ViewPassword>): null }\n\n        <Controller\n          name={name}\n          control={control}\n          rules={{required:  true}}\n          render={({ field }) => (  <InputText {...field} type={inputType} {...rest} /> )}\n        />\n      \n      </InputContainer>\n      {errorMessage ? <ErrorText>{errorMessage}</ErrorText> : null}\n    </>\n  )\n}\n\nexport {Input};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,cAAc,EAAEC,aAAa,EAAEC,SAAS,EAAEC,SAAS,EAAEC,YAAY,QAAO,UAAU;AAE3F,SAASC,UAAU,QAAQ,iBAAiB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5C,MAAMC,KAAK,GAAGA,CAAC;EAACC,QAAQ;EAAEC,IAAI;EAAEC,OAAO;EAAEC,YAAY;EAAEC,gBAAgB;EAAEC,UAAU,GAAG,KAAK;EAAEC,IAAI,GAAG,MAAM;EAAC,GAAGC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAE9H;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,UAAU,CAAC;;EAEtD;EACA,MAAMuB,wBAAwB,GAAGA,CAAA,KAAM;IACrCC,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;IAClBH,YAAY,CAACI,QAAQ,IAAIA,QAAQ,KAAK,UAAU,GAAG,MAAM,GAAG,UAAU,CAAC;EACzE,CAAC;EAED,oBACElB,OAAA,CAAAE,SAAA;IAAAiB,QAAA,gBACEnB,OAAA,CAACP,cAAc;MAAA0B,QAAA,GACZf,QAAQ,gBAAIJ,OAAA,CAACN,aAAa;QAAAyB,QAAA,EAAEf;MAAQ;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB,CAAC,GAAG,IAAI,EAC5Df,gBAAgB,gBAAIR,OAAA,CAACH,YAAY;QAAC2B,OAAO,EAAET,wBAAyB;QAAAI,QAAA,EAAGX;MAAgB;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe,CAAC,GAAG,IAAI,eAE/GvB,OAAA,CAACF,UAAU;QACTO,IAAI,EAAEA,IAAK;QACXC,OAAO,EAAEA,OAAQ;QACjBmB,KAAK,EAAE;UAACC,QAAQ,EAAG;QAAI,CAAE;QACzBC,MAAM,EAAEA,CAAC;UAAEC;QAAM,CAAC,kBAAQ5B,OAAA,CAACL,SAAS;UAAA,GAAKiC,KAAK;UAAElB,IAAI,EAAEG,SAAU;UAAA,GAAKF;QAAI;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAI;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEY,CAAC,EAChBhB,YAAY,gBAAGP,OAAA,CAACJ,SAAS;MAAAuB,QAAA,EAAEZ;IAAY;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,GAAG,IAAI;EAAA,eAC5D,CAAC;AAEP,CAAC;AAAAX,EAAA,CA5BKT,KAAK;AAAA0B,EAAA,GAAL1B,KAAK;AA8BX,SAAQA,KAAK;AAAE,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}