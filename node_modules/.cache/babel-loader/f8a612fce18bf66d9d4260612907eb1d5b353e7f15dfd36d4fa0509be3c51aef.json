{"ast":null,"code":"var _jsxFileName = \"/Users/thiagorosettimiranda/Documents/Developer/condo_facil/src/components/input/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { InputContainer, IconContainer, InputText, ErrorText, ViewPassword } from './styles';\nimport { Controller } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Input = ({\n  leftIcon,\n  name,\n  control,\n  errorMessage,\n  viewPasswordIcon,\n  isRequired = false,\n  ...rest\n}) => {\n  _s();\n  // Estado para controlar o tipo do input (password ou text)\n  const [inputType, setInputType] = useState('password');\n\n  // Função para alternar o tipo de input\n  const togglePasswordVisibility = () => {\n    setInputType(prevType => prevType === 'password' ? 'text' : 'password');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(InputContainer, {\n      children: [leftIcon ? /*#__PURE__*/_jsxDEV(IconContainer, {\n        children: leftIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 22\n      }, this) : null, viewPasswordIcon ? /*#__PURE__*/_jsxDEV(ViewPassword, {\n        onClick: togglePasswordVisibility,\n        children: viewPasswordIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(Controller, {\n        name: name,\n        control: control,\n        rules: {\n          required: isRequired\n        },\n        render: ({\n          field\n        }) => /*#__PURE__*/_jsxDEV(InputText, {\n          ...field,\n          type: inputType // Aplica o tipo do input controlado pelo estado\n          ,\n          ...rest\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), errorMessage ? /*#__PURE__*/_jsxDEV(ErrorText, {\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 23\n    }, this) : null]\n  }, void 0, true);\n};\n_s(Input, \"aV1HlXve5AIuoXUrkNK6g2SPozA=\");\n_c = Input;\nexport { Input };\nvar _c;\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["React","useState","InputContainer","IconContainer","InputText","ErrorText","ViewPassword","Controller","jsxDEV","_jsxDEV","Fragment","_Fragment","Input","leftIcon","name","control","errorMessage","viewPasswordIcon","isRequired","rest","_s","inputType","setInputType","togglePasswordVisibility","prevType","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","rules","required","render","field","type","_c","$RefreshReg$"],"sources":["/Users/thiagorosettimiranda/Documents/Developer/condo_facil/src/components/input/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { InputContainer, IconContainer, InputText, ErrorText, ViewPassword } from './styles';\nimport { IInput } from './type';\nimport { Controller } from 'react-hook-form';\n\nconst Input = ({ leftIcon, name, control, errorMessage, viewPasswordIcon, isRequired = false, ...rest }: IInput) => {\n  // Estado para controlar o tipo do input (password ou text)\n  const [inputType, setInputType] = useState('password');\n\n  // Função para alternar o tipo de input\n  const togglePasswordVisibility = () => {\n    setInputType(prevType => prevType === 'password' ? 'text' : 'password');\n  };\n\n  return (\n    <>\n      <InputContainer>\n        {leftIcon ? (<IconContainer>{leftIcon}</IconContainer>) : null}\n        \n        {/* Mostra o ícone de view password se viewPasswordIcon for passado */}\n        {viewPasswordIcon ? (\n          <ViewPassword onClick={togglePasswordVisibility}>\n            {viewPasswordIcon}\n          </ViewPassword>\n        ) : null}\n\n        <Controller\n          name={name}\n          control={control}\n          rules={{ required: isRequired }}\n          render={({ field }) => (\n            <InputText\n              {...field}\n              type={inputType} // Aplica o tipo do input controlado pelo estado\n              {...rest}\n            />\n          )}\n        />\n      </InputContainer>\n\n      {/* Exibe a mensagem de erro se houver */}\n      {errorMessage ? <ErrorText>{errorMessage}</ErrorText> : null}\n    </>\n  );\n};\n\nexport { Input };\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,cAAc,EAAEC,aAAa,EAAEC,SAAS,EAAEC,SAAS,EAAEC,YAAY,QAAQ,UAAU;AAE5F,SAASC,UAAU,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7C,MAAMC,KAAK,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,IAAI;EAAEC,OAAO;EAAEC,YAAY;EAAEC,gBAAgB;EAAEC,UAAU,GAAG,KAAK;EAAE,GAAGC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAClH;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,UAAU,CAAC;;EAEtD;EACA,MAAMsB,wBAAwB,GAAGA,CAAA,KAAM;IACrCD,YAAY,CAACE,QAAQ,IAAIA,QAAQ,KAAK,UAAU,GAAG,MAAM,GAAG,UAAU,CAAC;EACzE,CAAC;EAED,oBACEf,OAAA,CAAAE,SAAA;IAAAc,QAAA,gBACEhB,OAAA,CAACP,cAAc;MAAAuB,QAAA,GACZZ,QAAQ,gBAAIJ,OAAA,CAACN,aAAa;QAAAsB,QAAA,EAAEZ;MAAQ;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB,CAAC,GAAI,IAAI,EAG7DZ,gBAAgB,gBACfR,OAAA,CAACH,YAAY;QAACwB,OAAO,EAAEP,wBAAyB;QAAAE,QAAA,EAC7CR;MAAgB;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,GACb,IAAI,eAERpB,OAAA,CAACF,UAAU;QACTO,IAAI,EAAEA,IAAK;QACXC,OAAO,EAAEA,OAAQ;QACjBgB,KAAK,EAAE;UAAEC,QAAQ,EAAEd;QAAW,CAAE;QAChCe,MAAM,EAAEA,CAAC;UAAEC;QAAM,CAAC,kBAChBzB,OAAA,CAACL,SAAS;UAAA,GACJ8B,KAAK;UACTC,IAAI,EAAEd,SAAU,CAAC;UAAA;UAAA,GACbF;QAAI;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT;MACD;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACY,CAAC,EAGhBb,YAAY,gBAAGP,OAAA,CAACJ,SAAS;MAAAoB,QAAA,EAAET;IAAY;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,GAAG,IAAI;EAAA,eAC5D,CAAC;AAEP,CAAC;AAACT,EAAA,CAvCIR,KAAK;AAAAwB,EAAA,GAALxB,KAAK;AAyCX,SAASA,KAAK;AAAG,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}